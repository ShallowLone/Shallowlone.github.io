<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://www.shallowlone.com</id>
    <title>落花繁星 星奔川騖 • Posts by &#34;cs&#34; tag</title>
    <link href="http://www.shallowlone.com" />
    <updated>2022-11-05T06:45:00.000Z</updated>
    <category term="blog" />
    <category term="mark" />
    <category term="cs" />
    <entry>
        <id>http://www.shallowlone.com/2022/11/05/random/</id>
        <title>Random Number,Simulation and Random Walk</title>
        <link rel="alternate" href="http://www.shallowlone.com/2022/11/05/random/"/>
        <content type="html">&lt;p&gt;随机数，仿真，Random Walk 的杂谈&lt;/p&gt;
&lt;p&gt;最近在学习随机数的相关内容，刚好又在学 python, 故浅浅记录下相关知识&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;随机数的定义&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#随机数的定义&#34;&gt;#&lt;/a&gt; 随机数的定义:&lt;/h2&gt;
&lt;p&gt;密码学以外的范畴&lt;/p&gt;
&lt;p&gt;随机数是专门的随机实验的结果&lt;/p&gt;
&lt;p&gt;在统计学不同技术中需要使用，并且产生方式有多种 (该类方式称为随机数发生器)&lt;/p&gt;
&lt;p&gt;随机数特效：随机性 不可预测性 不可重现性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;随机性：不存在统计学偏差，是完全杂乱的数列&lt;/li&gt;
&lt;li&gt;不可预测性：不能从过去的数列推测出下一个出现的数&lt;/li&gt;
&lt;li&gt;不可重现性：除非将数列本身保存下来，否则不能重现相同的数列&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;密码学中，有三大标准:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;统计学伪随机性。统计学伪随机性指的是在给定的随机比特流样本中，1 的数量大致等于 0 的数量，同理，“10”“01”“00”“11” 四者数量大致相等。类似的标准被称为统计学随机性。满足这类要求的数字在人类 “一眼看上去” 是随机的。&lt;/li&gt;
&lt;li&gt;密码学安全伪随机性。其定义为，给定随机样本的一部分和随机算法，不能有效的演算出随机样本的剩馀部分。&lt;/li&gt;
&lt;li&gt;真随机性。其定义为随机样本不可重现。实际上只要给定边界条件，真随机数并不存在，可是如果产生一个真随机数样本的边界条件十分复杂且难以捕捉（比如当地的本底辐射波动值），可以认为用这个方法演算出来了真随机数。但实际上，这也只是非常接近真随机数的伪随机数，一般认为，无论是本底辐射、物理噪音、抛硬币等等都是可被观察了解的，任何基于经典力学产生的随机数，都只是伪随机数。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;从目前角度来看，目前不存在真随机数，平时用的验证码随机性也只是伪随机数.&lt;/p&gt;
&lt;h3 id=&#34;应用角度&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#应用角度&#34;&gt;#&lt;/a&gt; 应用角度:&lt;/h3&gt;
&lt;p&gt;真正的随机数是使用&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclODklQTklRTclOTAlODYlRTclOEUlQjAlRTglQjElQTE/ZnJvbU1vZHVsZT1sZW1tYV9pbmxpbms=&#34;&gt;物理现象&lt;/span&gt;产生的：比如掷钱币、&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTklQUElQjAlRTUlQUQlOTA/ZnJvbU1vZHVsZT1sZW1tYV9pbmxpbms=&#34;&gt;骰子&lt;/span&gt;、转轮、使用&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclOTQlQjUlRTUlQUQlOTAlRTUlODUlODMlRTQlQkIlQjY/ZnJvbU1vZHVsZT1sZW1tYV9pbmxpbms=&#34;&gt;电子元件&lt;/span&gt;的噪音、&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlQTAlQjglRTglQTMlODIlRTUlOEYlOTg/ZnJvbU1vZHVsZT1sZW1tYV9pbmxpbms=&#34;&gt;核裂变&lt;/span&gt;等等，这样的&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTklOUElOEYlRTYlOUMlQkElRTYlOTUlQjAlRTUlOEYlOTElRTclOTQlOUYlRTUlOTklQTgvMTYwNTUwMTg/ZnJvbU1vZHVsZT1sZW1tYV9pbmxpbms=&#34;&gt;随机数发生器&lt;/span&gt;叫做物理性随机数发生器，它们的缺点是技术要求比较高。&lt;/p&gt;
&lt;p&gt;使用计算机产生真随机数的方法是获取 cpu 频率与温度的不确定性以及统计一段时间的运算次数每次都会产生不同的值，系统时间的误差以及声卡的底噪等。&lt;/p&gt;
&lt;p&gt;在实际应用中往往使用&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTQlQkMlQUElRTklOUElOEYlRTYlOUMlQkElRTYlOTUlQjA/ZnJvbU1vZHVsZT1sZW1tYV9pbmxpbms=&#34;&gt;伪随机数&lt;/span&gt;就足够了。这些&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlOTUlQjAlRTUlODglOTc/ZnJvbU1vZHVsZT1sZW1tYV9pbmxpbms=&#34;&gt;数列&lt;/span&gt;是 “似乎” 随机的数，实际上它们是通过一个固定的、可以重复的计算方法产生的。计算机或计算器产生的随机数有很长的周期性。它们不真正地随机，因为它们实际上是可以计算出来的，但是它们具有类似于随机数的&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclQkIlOUYlRTglQUUlQTElRTclODklQjklRTUlQkUlODE/ZnJvbU1vZHVsZT1sZW1tYV9pbmxpbms=&#34;&gt;统计特征&lt;/span&gt;。这样的发生器叫做&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTQlQkMlQUElRTklOUElOEYlRTYlOUMlQkElRTYlOTUlQjAlRTUlOEYlOTElRTclOTQlOUYlRTUlOTklQTg/ZnJvbU1vZHVsZT1sZW1tYV9pbmxpbms=&#34;&gt;伪随机数发生器&lt;/span&gt;。&lt;/p&gt;
&lt;h4 id=&#34;如何生成伪随机数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#如何生成伪随机数&#34;&gt;#&lt;/a&gt; 如何生成伪随机数:&lt;/h4&gt;
&lt;p&gt;最基础的线性同余法使用下面的递归公式来生成随机数列：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;msub&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;X_{n+1}=(aX_{n}+c) mod m&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.891661em;vertical-align:-0.208331em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07847em;&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.301108em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mbin mtight&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.208331em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07847em;&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;m&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;其中 a、c、m 是三个设定的常数。用 a 乘以上一个随机数，与 c 相加，最后与 m 求余，从而得到下一个随机数。在算第一个随机数时，上一个随机数还不存在，需要指定一个数字，这个数字被称为种子数字（seed）。&lt;/p&gt;
&lt;p&gt;线性同余法的周期（也就是出现两个相同随机数的间隔）最大为 m，因为任何数与 m 取余的结果都是一个位于 0 与 m - 1 之间的数字，最多递归到第 m 次必然出现与前面出现数字重叠的现象。而通过这个算法也可以看到，只要出现一个重复的数字，后面出现的所有数字序列与前面出现的序列都是重叠的。而大部分情况下线性同余法的周期都会小于 m。要令线性同余法达到最大周期 m，a、c 以及 m 三个常数数值还应符合以下条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;c 与 m 互质&lt;/li&gt;
&lt;li&gt;m 的所有质因数都能整除 a - 1&lt;/li&gt;
&lt;li&gt;若 m 是 4 的倍数，则 a - 1 也是&lt;/li&gt;
&lt;li&gt;a、c、以及种子数字都比 m 小&lt;/li&gt;
&lt;li&gt;a、c 是正整数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;如何生成真随机数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#如何生成真随机数&#34;&gt;#&lt;/a&gt; 如何生成真随机数:&lt;/h4&gt;
&lt;p&gt;要在计算机里生成真随机数，除了算法方面还需要借助一些特殊的硬件在算法中加入其它一些随机因子。这些随机因子可以是用户键盘或鼠标相关的随机操作数据，也可以是环境噪音、计算机本身热噪声、宇宙射线、放射性同位素衰变数据等任何在物理层面产生的随机数据。&lt;/p&gt;
&lt;p&gt;现在某些计算机 CPU 里可以通过放大电路的热噪声并以此为因子来产生真随机数。我们知道温度高于绝对零度的原子都存在热运动，在集成电路里这些原子的热运动会在电路里产生噪声，噪声会使得电路中的电压存在微小的起伏，而这些起伏变化是可以视为随机的。这种 CPU 正是通过获取这些变化的随机数据并以此来生成真随机数。&lt;/p&gt;
&lt;p&gt;但这种真随机数也有明显的缺点，那就是生成的速度比我们上面提到的伪随机数会慢很多。通常这种真随机数只被用在一些对安全级别要求较高的场景中，如使用随机密钥进行数据加密时，用来提高加密过程的不可预测性，增加破解难度。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;关于随机漫步random-walk&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#关于随机漫步random-walk&#34;&gt;#&lt;/a&gt; 关于随机漫步 (Random Walk)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;随机漫步是一种数学统计模型，由一系列轨迹所组成，每一次都是随机的，可用来表示不规则的变动形式.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以在各种空间上进行：圆，整数或实数线，向量空间，曲面，高纬的黎曼流形等.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在最简单的情况下，时间是离散的，路径可以是一个由自然数索引的随机变量序列，但是也可以定义在随机时间采取步骤的随机游走 (t ∈ [0,+∞))&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通常情况下，可以假设随机游走以马尔可夫链或马可夫过程的形式出现，但是比较复杂的 RW 不一定有这种情况，会出现特殊的模式：布朗运动，醉汉走路，莱维飞行.&lt;/p&gt;
&lt;p&gt;可以用于模拟分子在液体 / 气体中的传播路径，觅食动物的路径，股票价格的曲线和赌徒的经济情况.&lt;/p&gt;
&lt;h3 id=&#34;一维随机游走&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一维随机游走&#34;&gt;#&lt;/a&gt; 一维随机游走&lt;/h3&gt;
&lt;p&gt;一个简单的随机游走的例子是在整数 {\displaystyle \mathbb {Z} }&lt;img data-src=&#34;https://wikimedia.org/api/rest_v1/media/math/render/svg/449494a083e0a1fda2b61c62b2f09b6bee4633dc&#34; alt=&#34;\mathbb Z&#34;&gt; 轴上的随机游走。它从 0 开始，然后每一步以相同的概率移动 + 1 或−1。实际操作如下：我们首先在 0 的位置放上一个标记，然后掷一枚公平硬币。若头朝上，则将标记向右移动一个单位；反之将标记向左移动一个单位。 五次翻转后，标记现在可能在 1,-1,3,-3,5 或 - 5 的位置。 若五个翻转中得到三个头和两个尾，不管任何顺序，标记都会落在 1。一共有 10 种方式落在 1（三个头和两个尾），10 种方式落在 - 1（三个尾和两个头），5 种方式落在 3（4 个头和 1 个尾），5 种方式落在 - 3（4 个尾和 1 个头），1 种方式 5（5 个头） ，以及一种方式落在 - 5（五个尾)。&lt;/p&gt;
&lt;p&gt;如果随机游走永不停止，那么它会穿过边界线多少次？{\displaystyle \mathbb {Z} }&lt;img data-src=&#34;https://wikimedia.org/api/rest_v1/media/math/render/svg/449494a083e0a1fda2b61c62b2f09b6bee4633dc&#34; alt=&#34;\mathbb Z&#34;&gt; 上的简单随机游走将会无限次走过每一个点。这个结果被称为&lt;em&gt;平交道现象（level-crossing phenomenon）&lt;/em&gt;, &lt;em&gt;重现（recurrence）&lt;em&gt;或&lt;/em&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU4JUI1JThDJUU1JUJFJTkyJUU3JUEwJUI0JUU0JUJBJUE3JUU3JTkwJTg2JUU4JUFFJUJB&#34;&gt;赌徒破产理论&lt;/span&gt;&lt;/em&gt;。最后一个名字的来历如下：若一个拥有有限财富的赌徒和一家拥有无限金钱的银行玩 “公平游戏”，最终赌徒一定会输掉。 赌徒的钱的数量将经过随机游走的过程，并且在某个时刻达到零，游戏结束。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU0JUI4JUFEJUU1JUJGJTgzJUU2JTlFJTgxJUU5JTk5JTkwJUU1JUFFJTlBJUU3JTkwJTg2&#34;&gt;中心极限定理&lt;/span&gt;和&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU5JTg3JThEJUU1JUFGJUI5JUU2JTk1JUIwJUU1JUJFJThC&#34;&gt;重对数律&lt;/span&gt;描述了 {\displaystyle \mathbb {Z} }&lt;img data-src=&#34;https://wikimedia.org/api/rest_v1/media/math/render/svg/449494a083e0a1fda2b61c62b2f09b6bee4633dc&#34; alt=&#34;\mathbb Z&#34;&gt; 上的简单随机漫步。前者意味着随着 “n” 的增加，概率分布（与每行中的数字成比例）接近&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU2JUFEJUEzJUU2JTgwJTgxJUU1JTg4JTg2JUU1JUI4JTgz&#34;&gt;正态分布&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;这样的理论可以直接推广到晶格上的随机漫步，它是有限图上的无限折叠阿贝尔覆盖图。在这样的情境中，我们可以设立中心极限定理和大偏差定理。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;关于蒙特卡罗仿真参考文章&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#关于蒙特卡罗仿真参考文章&#34;&gt;#&lt;/a&gt; 关于蒙特卡罗仿真 (参考文章)&lt;/h2&gt;
&lt;p&gt;仿真（Simulation）：在分析一个系统时，可先构造一个与该系统相似的模型，通过在模型上进行计算机仿真实验来研究原模型，这就是仿真，文献中也常称为模拟。 事实上对于电子信息科学领域来说，模拟有另外一个意思即模拟电路数字电路的模拟，此模拟（analog）非彼模拟（simulation），不过这个很容易通过上下文来分辨。 顺便提一下，台湾地区把 analog circuit 翻译成类比电路（源于 analogy 的类比之意吧），初次看到可能会觉得不知所云，不过名字有时候只是一个名字。 以下叙述中，不做区分有时候用模拟有时候用仿真（虽然两者的使用场合会有细微的区别）。&lt;/p&gt;
&lt;p&gt;如果待仿真的对象系统是随机（stochastic）系统，可以用概率模型来描述系统中的随机性并进行仿真实验，称为随机仿真（stochastic simulation）。 它有一个更酷炫的名称叫做蒙特卡罗仿真 (monte-carlo simulation)，这个名字来源于世界著名的赌城摩纳哥的蒙特卡罗。 通过对研究问题或系统进行随机抽样，然后对样本值进行统计分析，进而得到所研究问题或系统的某些具体参数、统计量等。 这种计算方法以概率与统计理论为基础，由威勒蒙和冯纽曼在 20 世纪 40 年代为研制武器而首先提出，在此之前，作为该方法的基本思想，实际上早就被统计学家发现和利用。&lt;/p&gt;
&lt;p&gt;1.1 两个要点&lt;br&gt;
蒙特卡罗仿真的要点有二：&lt;/p&gt;
&lt;p&gt;(1) 建立计算机模型以近似作为研究对象的物理系统的行为&lt;/p&gt;
&lt;p&gt;(2) 不确定性 (uncertainty) 或者说随机性 (stochasticity) 的处理。 需要在计算机程序中模仿随机性，比如说随机数的生成，或者随机事件的发生&lt;/p&gt;
&lt;p&gt;1.2 模拟的利弊 [2]&lt;/p&gt;
&lt;p&gt;优势&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可能适用于无法分析处理的问题&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更高水平的建模细节（并不一定意味着增加真实感）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;允许对其他昂贵（例如高风险）或不可行的现场实验进行模拟实验&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;假设分析：试错程序&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可用于测试数学假设的有效性（例如，验证分析模型）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;弊端&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;假设分析：难以发展因果关系&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;计算昂贵的数学工具（需要多次复制）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对输出进行适当的统计分析很复杂&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;详细的模型需要制定和校准非常详细的数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据质量， “垃圾进，垃圾出”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;难以用于执行优化（基于模拟的优化）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;正如分析模型一样，仿真模型基于众多&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;假设和近似值，请谨慎使用并记住&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这是对现实的简化，即模型！&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;蒙特卡洛仿真的最基本要素即为随机数的产生&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;在 python 库中，Random 和 Numpy 提供了强大的处理工具.&lt;/p&gt;
&lt;p&gt;可以使用这两个模块产生相应的随机数序列:&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; random&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; math&lt;span class=&#34;comment&#34;&gt;#这句没啥必要&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#实数序列&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fig,ax = plt.subplots(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rand0 = np.random.random(&lt;span class=&#34;number&#34;&gt;100000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ax[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].hist(rand0)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#虚数序列&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rand1 = np.random.randint(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;10000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ax[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]=hist(rand1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#正态分布&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rand2 = np.random.randn(&lt;span class=&#34;number&#34;&gt;10000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ax[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]=hist(rand2,bins=&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;抛硬币实验&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#抛硬币实验&#34;&gt;#&lt;/a&gt; 抛硬币实验:&lt;/h4&gt;
&lt;p&gt;通过 python 进行试验，估计出出现正反面的经验性概率:&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# coin-tossing&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;num_tosses  = [&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;10000&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;100000&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; num_toss &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; num_tosses:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;#np.random.seed(42)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    coin_toss = np.random.random(num_toss)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    head = coin_toss &amp;gt;= &lt;span class=&#34;number&#34;&gt;0.5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    tail = coin_toss &amp;lt;  &lt;span class=&#34;number&#34;&gt;0.5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    head_count = np.&lt;span class=&#34;built_in&#34;&gt;sum&lt;/span&gt;(head)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    tail_count = np.&lt;span class=&#34;built_in&#34;&gt;sum&lt;/span&gt;(tail)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    head_prob  = head_count/num_toss&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    tail_prob  = tail_count/num_toss&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;num_toss = &amp;#123;0&amp;#125;, head_prob=&amp;#123;1&amp;#125;, tail_prob=&amp;#123;2&amp;#125;&amp;#x27;&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;format&lt;/span&gt;(num_toss,head_prob,tail_prob))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在实验次数越来越多的情况下，两个概率无限接近于 0.5, 说明试验性结果具有随机性.&lt;/p&gt;
&lt;p&gt;但是，概率论中的大数定律告诉我们，当实验次数越大，这个估计概率就有越大的概率更接近真实的概率（在以上例子中就是 0.5）。 眼尖的人也许已经看出来了，上面 100000 次的实验（记为 1000000-toss）中的估计结果并没有比 10000 次的实验（记为 10000-toss）结果更接近 0.5，这是咋回事？在随机世界里一切都是概率，如上面加粗的字体所示，抛掷次数越多只是使得估计值接近真实值的概率更大了！&lt;/p&gt;
&lt;h4 id=&#34;抛骰子&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#抛骰子&#34;&gt;#&lt;/a&gt; 抛骰子:&lt;/h4&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;num_rolling  = [&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;10000&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;100000&lt;/span&gt;]    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; num_roll &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; num_rolling:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    die_roll = np.random.random(num_roll)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    one   = die_roll &amp;lt;   &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;/&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    two   = np.logical_and(die_roll &amp;gt;=  &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;/&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;, die_roll &amp;lt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;/&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    three = np.logical_and(die_roll &amp;gt;=  &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;/&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;, die_roll &amp;lt; &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;/&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    four  = np.logical_and(die_roll &amp;gt;=  &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;/&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;, die_roll &amp;lt; &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;/&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    five  = np.logical_and(die_roll &amp;gt;=  &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;/&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;, die_roll &amp;lt; &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;/&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    six   = die_roll &amp;gt;=  &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;/&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    prob_one   = np.&lt;span class=&#34;built_in&#34;&gt;sum&lt;/span&gt;(one)  /num_roll&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    prob_two   = np.&lt;span class=&#34;built_in&#34;&gt;sum&lt;/span&gt;(two)  /num_roll&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    prob_three = np.&lt;span class=&#34;built_in&#34;&gt;sum&lt;/span&gt;(three)/num_roll&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    prob_four  = np.&lt;span class=&#34;built_in&#34;&gt;sum&lt;/span&gt;(four) /num_roll&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    prob_five  = np.&lt;span class=&#34;built_in&#34;&gt;sum&lt;/span&gt;(five) /num_roll&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    prob_six   = np.&lt;span class=&#34;built_in&#34;&gt;sum&lt;/span&gt;(six)  /num_roll&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;num_roll = &amp;#123;0&amp;#125;, prob_one=&amp;#123;1&amp;#125;, prob_two=&amp;#123;2&amp;#125;, prob_three=&amp;#123;3&amp;#125;, prob_four=&amp;#123;4&amp;#125;, prob_five=&amp;#123;5&amp;#125;, prob_6=&amp;#123;6&amp;#125;&amp;#x27;&lt;/span&gt;\&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          .&lt;span class=&#34;built_in&#34;&gt;format&lt;/span&gt;(num_roll,prob_one,prob_two,prob_three,prob_four,prob_five,prob_six))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;概率也是无限接近于 0.166667 (&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mfrac&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mn&gt;6&lt;/mn&gt;&lt;/mfrac&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\frac{1}{6}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.190108em;vertical-align:-0.345em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.845108em;&#34;&gt;&lt;span style=&#34;top:-2.6550000000000002em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.394em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.345em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;)&lt;/p&gt;
&lt;h4 id=&#34;用蒙特卡罗仿真求pi值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#用蒙特卡罗仿真求pi值&#34;&gt;#&lt;/a&gt; 用蒙特卡罗仿真求 pi 值&lt;/h4&gt;
&lt;p&gt;在以上两个实验中，只有一个随机变量（每次只扔一个硬币或者一个骰子，反映这个实验结果的成为一个随机变量）。我们也可以在每次实验中扔两个或者多个硬币或骰子，这样相当于通识产生了两个随机变量的样本，这两个随机变量拼在一起构成一个随机向量，或者一个 2 维或多维随机变量。基于一个随机变量能做的事情是有限，但是增加随机变量的个数，就可以做更复杂的事情，比如说对更复杂的系统进行模拟。以下，我们来看一个基于蒙特卡罗仿真求圆周率的近似值的方法。&lt;/p&gt;
&lt;p 4&gt;其基本思想如下：我们直到一个半径为 1 的圆（也称为单位圆）内接于一个边长为 2 的正方形。单位园的面积是，而其内接于的正方形的面积为 4。假设以单位圆的圆心作为坐标原点（0,0），然后我们往这正方形内随机地扔‘小球’。每次小球的落点的坐标记为（x,y），它们分别可看作随机变量 X 和 Y 的样本值。显而易见的是（即便不是那么显而易见，要想解释起来似乎还比较麻烦&lt;sup&gt; -&lt;/sup&gt;，所以如果你不觉得那么显而易见，就先接受它吧&lt;sup&gt; -&lt;/sup&gt;），X 和 Y 分别是在 [-1,1] 区间内服从均一分布。当我们扔小球的次数足够多时，小球落在单位圆内的比率应该就近似地等于单位圆面积与正方形面积之比，即\frac{∏}&lt;/p&gt;
&lt;p&gt;仿真代码:&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# Find the approximation of pie using monte-carlo simulation&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;num_trials  = [&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;10000&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;100000&lt;/span&gt;,&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1e6&lt;/span&gt;),&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1e7&lt;/span&gt;)]    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; num_trial &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; num_trials:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x     = np.random.random(num_trial) * &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    y     = np.random.random(num_trial) * &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    d     = np.sqrt(x**&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; + y**&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    in_circle = (d &amp;lt;= &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    pi_esti = &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt; * np.mean(in_circle)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;num_trial = &amp;#123;0&amp;#125;, pi_esti=&amp;#123;1&amp;#125;, err = &amp;#123;2&amp;#125;&amp;#x27;&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;format&lt;/span&gt;(num_trial,pi_esti,np.&lt;span class=&#34;built_in&#34;&gt;abs&lt;/span&gt;(pi_esti-np.pi)))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;从仿真结果来看，误差随着仍小球的次数（num_trial）增大而减小的趋势非常明显。&lt;/p&gt;
&lt;p&gt;但是，正如前面所解释的那样，这个就每次实验而言，这种趋势并不是确定性的，而是概率意义上的。如果你在运行它是偶尔发现 num_trial 大的情况的误差反而比 num_trial 较小的情况的误差要大，也不要感到惊讶。因为，从概率意义上来说这个的确是可能发生的。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;蒙特卡罗仿真醉汉走路&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#蒙特卡罗仿真醉汉走路&#34;&gt;#&lt;/a&gt; 蒙特卡罗仿真 + 醉汉走路&lt;/h2&gt;
&lt;p&gt;在问题中，醉汉从坐标原点（0，0）出发，每一步他可能向东南西北四个方向随机选择一个方向向前走一步（一个坐标单位）。在第一步之后他的位置有&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;4^k&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.849108em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.849108em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.03148em;&#34;&gt;k&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 种可能性。以后每走一步都会四种可能性，因此经过 k 步之后，他可能的位置有种可能性。。。当然，这是不准确的。因为只谈论位置的话，他有可能重复回到某个位置，因此 k 步之后，他可能的位置可能性数会小于&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;4^k&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.849108em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.849108em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.03148em;&#34;&gt;k&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 种可能性。但是如果我们谈论从第一步开始之后的轨迹的话，则的确会有&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;4^k&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.849108em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.849108em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.03148em;&#34;&gt;k&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 种可能性。&lt;/p&gt;
&lt;p&gt;由于可能的轨迹数随着步数呈指数增长，所以关注某一次实验中中 k 步之后醉汉位置在哪儿可能价值不大。我们可能更关心的是，在 k 步之后醉汉离原点的距离的预期均值是多少，呈什么样的分布，最远到过多远，出发以后有没有回到过原点，等等等等。显然这样的问题我们无法通过计算得到一个确定性的值，我们有两种选择：&lt;/p&gt;
&lt;p&gt;基于随机过程理论进行理论解析&lt;br&gt;
基于蒙特卡洛仿真得到近似结果&lt;br&gt;
事实上对于绝大多数人来说，只有一种选择，那就是蒙特卡罗仿真法，只要会编程就可以做得到。第一种选择需要相当程度的数学能力（特别是随机过程理论方面）。&lt;/p&gt;
&lt;p&gt;使用 python 代码如下:&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;Created on Sat Mar 26 11:41:18 2022&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;@author: Chenxy&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; time&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;steps = np.array([(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;), (&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;), (-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;),(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)]) &lt;span class=&#34;comment&#34;&gt;# East, South, West, North&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;random_walk&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;numSteps&lt;/span&gt;):    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    locs      = np.zeros((numSteps,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return2start = &lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    dist_max  = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; k &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,numSteps):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        step = steps[np.random.choice(np.arange(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;))]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        locs[k]  = locs[k-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] + step&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    dist     = np.sqrt(locs[:,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]**&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; + locs[:,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]**&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    dist_max = np.&lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt;(dist)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return2start = np.&lt;span class=&#34;built_in&#34;&gt;min&lt;/span&gt;(dist[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:]) == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    final_loc  = locs[-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    final_dist = dist[-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; return2start, dist_max, final_loc,final_dist&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;multiple_walks&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;numSteps, numRuns&lt;/span&gt;):    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return2start = np.zeros((numRuns,))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    dist_max     = np.zeros((numRuns,))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    final_loc    = np.zeros((numRuns,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    final_dist   = np.zeros((numRuns,))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    tstart =time.time()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; k &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(numRuns):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return2start[k], dist_max[k], final_loc[k,:],final_dist[k] = random_walk(numSteps)        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; k%&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;==&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;: &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;k=&amp;#123;0&amp;#125;&amp;#x27;&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;format&lt;/span&gt;(k))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    tstop  =time.time()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Time cost for &amp;#123;0&amp;#125; simulation with numSteps=&amp;#123;1&amp;#125; is &amp;#123;2:6.2f&amp;#125;(sec)&amp;#x27;&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;format&lt;/span&gt;(numRuns,numSteps,tstop-tstart))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fail_ratio_to_return_start = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;-np.&lt;span class=&#34;built_in&#34;&gt;sum&lt;/span&gt;(return2start)/numRuns&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;failure ratio to return to start point = &amp;#123;0:4.2f&amp;#125;%&amp;#x27;&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;format&lt;/span&gt;(fail_ratio_to_return_start*&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;dist_max: mean=&amp;#123;0&amp;#125;, std=&amp;#123;1&amp;#125;&amp;#x27;&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;format&lt;/span&gt;(np.mean(dist_max),np.std(dist_max)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;final_dist: mean=&amp;#123;0&amp;#125;, std=&amp;#123;1&amp;#125;&amp;#x27;&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;format&lt;/span&gt;(np.mean(final_dist),np.std(final_dist)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# Visualize the simulation result&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fig,ax = plt.subplots(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,figsize=(&lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ax[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].hist(dist_max,bins=&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;, density=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ax[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].set_title(&lt;span class=&#34;string&#34;&gt;&amp;#x27;dist_max histogram, with numSteps=&amp;#123;0&amp;#125;&amp;#x27;&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;format&lt;/span&gt;(numSteps))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ax[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].hist(final_dist,bins=&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;, density=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ax[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].set_title(&lt;span class=&#34;string&#34;&gt;&amp;#x27;final_dist histogram, with numSteps=&amp;#123;0&amp;#125;&amp;#x27;&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;format&lt;/span&gt;(numSteps))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fig,ax = plt.subplots()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ax.scatter(final_loc[:,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;],final_loc[:,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ax.set_title(&lt;span class=&#34;string&#34;&gt;&amp;#x27;final_loc scatter plot, with numSteps=&amp;#123;0&amp;#125;&amp;#x27;&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;format&lt;/span&gt;(numSteps))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;observation&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#observation&#34;&gt;#&lt;/a&gt; Observation&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;醉汉有一定的概率回不了家&lt;/li&gt;
&lt;li&gt;到过的最远距离与最终距离的均值和方差有差异&lt;/li&gt;
&lt;li&gt;最远距离与最终距离的均值和方差都大致与 sqrt (numSteps) 相当&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如何解释这些结果呢？这些结果有什么必然性吗？仿真可以提供这些结果（当然前提条件是确保仿真本身是正确的），仿真本身回答不了这些问题，但是可以为理论分析提供线索和方向。但是，当一个仿真模型通过实验结果与理论分析得到确认后，就可以基于此进行预测，充当深入到理论分析无法或者至少难以涉足的 “无人区” 去探索的有力工具了。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;关于醉汉是否能回家的结论&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#关于醉汉是否能回家的结论&#34;&gt;#&lt;/a&gt; 关于醉汉是否能回家的结论&lt;/h2&gt;
&lt;p&gt;1905 年，英国统计学家 Pearson 在《自然》杂志上公开求解随机游走问题（Random Walk Problem）：如果一个醉汉走路时每步的方向和大小完全随机（本文上面的仿真是限定于较简单的情况，即方向限定于 4 个，每步大小均一），经过一段时间之后，在什么地方找到他的可能性最大？&lt;/p&gt;
&lt;p&gt;1921 年，美籍匈牙利数学家波利亚（George Pólya，1887 年－1985 年）在研究随机游走问题后，证明了 “一维或二维随机游走具有常返性” 的随机游走定理，即只要时间足够长，他最终总能回到出发点。因此，最终回家的概率是 100% 。&lt;/p&gt;
&lt;p&gt;酒鬼不可能在空中游走，鸟儿的活动空间才是 3 维的，因此，美国日裔数学家角谷静夫（Shizuo Kakutani，1911–2004）将波利亚定理用一句通俗又十分风趣的语言来总结：醉汉总能找到回家的路，喝醉的小鸟则可能永远也回不了家。随机游走定理也常被称为醉汉回家定理。&lt;/p&gt;
&lt;p&gt;以上仿真结果中虽然醉汉有一定概率回不了家，但是这个只是因为仿真步数不够大而已。理论上，让醉汉一直走下去，总会回到家的。以上结果也的确表明仿真步数越长，回不到家的概况在逐渐下降，这个趋势符合预期。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;虽然不太懂随机游走的研究是否有意义，但是个人认为对概率数学展开研究是有必要的.LMAO&lt;/p&gt;
&lt;p&gt;附 1: 一维 / 二维情况下的随机漫步代码实现:&lt;/p&gt;
&lt;p&gt;一维:x 为时间轴，y 距离&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#-*- coding: utf-8 -*-&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; random&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;Randwalk&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;n&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    y = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    distance=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    time = [x]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    position = [y]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    E=[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt; (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,n+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        move = np.random.uniform(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; move &amp;lt; &lt;span class=&#34;number&#34;&gt;0.5&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            x += &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            y += &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; move &amp;gt; &lt;span class=&#34;number&#34;&gt;0.5&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            x += &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            y += -&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        time.append(x)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        position.append(y)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; [time,position]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&amp;#x27;Trials and plots&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Randwalk1 = Randwalk(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Randwalk2 = Randwalk(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Randwalk3 = Randwalk(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Randwalk4 = Randwalk(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Randwalk5 = Randwalk(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.plot(Randwalk1[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;],Randwalk1[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;],&lt;span class=&#34;string&#34;&gt;&amp;#x27;r-&amp;#x27;&lt;/span&gt;, label = &lt;span class=&#34;string&#34;&gt;&amp;quot;Randwalk1&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.plot(Randwalk2[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;],Randwalk2[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;],&lt;span class=&#34;string&#34;&gt;&amp;#x27;g-&amp;#x27;&lt;/span&gt;, label = &lt;span class=&#34;string&#34;&gt;&amp;quot;Randwalk2&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.plot(Randwalk3[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;],Randwalk3[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;],&lt;span class=&#34;string&#34;&gt;&amp;#x27;b-&amp;#x27;&lt;/span&gt;, label = &lt;span class=&#34;string&#34;&gt;&amp;quot;Randwalk3&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.plot(Randwalk4[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;],Randwalk4[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;],&lt;span class=&#34;string&#34;&gt;&amp;#x27;yellow&amp;#x27;&lt;/span&gt;, label = &lt;span class=&#34;string&#34;&gt;&amp;quot;Randwalk4&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.plot(Randwalk5[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;],Randwalk5[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;],&lt;span class=&#34;string&#34;&gt;&amp;#x27;black&amp;#x27;&lt;/span&gt;, label = &lt;span class=&#34;string&#34;&gt;&amp;quot;Randwalk5&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.title(&lt;span class=&#34;string&#34;&gt;&amp;quot;1D Random Walks&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.legend(loc=&lt;span class=&#34;string&#34;&gt;&amp;#x27;upper center&amp;#x27;&lt;/span&gt;, bbox_to_anchor=(&lt;span class=&#34;number&#34;&gt;0.5&lt;/span&gt;,-&lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;), fancybox=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;, shadow=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;二维: y 距离，x 时间&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;steps = np.array([(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;), (&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;), (-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;),(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)]) &lt;span class=&#34;comment&#34;&gt;# East, South, West, North&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(steps)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;numSteps = &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;input&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;输入一个&amp;quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;locs = np.zeros((numSteps,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; k &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,numSteps):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    step = steps[np.random.choice(np.arange(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;))]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    locs[k]  = locs[k-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] + step&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dist = np.sqrt(locs[:,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]**&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; + locs[:,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]**&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)            &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;origins = [] &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; k &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(numSteps):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; locs[k,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]==&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; locs[k,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]==&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        origins.append(k)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;numSteps = &amp;#123;0&amp;#125;, final loc = &amp;#123;1&amp;#125;, dist = &amp;#123;2&amp;#125;&amp;#x27;&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;format&lt;/span&gt;(numSteps,locs[-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;],dist[-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(origins)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.plot(locs[:,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;],locs[:,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.title(&lt;span class=&#34;string&#34;&gt;&amp;#x27;random walks: &amp;#123;0&amp;#125; steps&amp;#x27;&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;format&lt;/span&gt;(numSteps))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;p&gt;附录 2: 参考文献&lt;/p&gt;
&lt;p&gt;百度百科:&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTklOUElOEYlRTYlOUMlQkElRTYlQjglQjglRTglQjUlQjAvMTY3NDE0Ng==&#34;&gt; 随机游走_百度百科 (baidu.com)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTklOUElOEYlRTYlOUMlQkElRTYlOTUlQjA/ZnJvbU1vZHVsZT1sZW1tYV9zZWFyY2gtYm94&#34;&gt;随机数_百度百科 (baidu.com)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Wiki:&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUmFuZG9tX3dhbGs=&#34;&gt;Random walk - Wikipedia&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;CSDN:&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZW54eV9id2F2ZS9hcnRpY2xlL2RldGFpbHMvMTIzNzQ3MjQ1&#34;&gt; 蒙特卡罗仿真（2）：醉汉的随机漫步仿真示例（Python 实现）_笨牛慢耕的博客 - CSDN 博客_醉汉漫步&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;[科学网 — 喝醉的酒鬼能找到回家的路吗？ - 高宏的博文 (&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3NjaWVuY2VuZXQuY24=&#34;&gt;sciencenet.cn&lt;/span&gt;)](&lt;/p&gt;
</content>
        <category term="cs" />
        <updated>2022-11-05T06:45:00.000Z</updated>
    </entry>
</feed>
